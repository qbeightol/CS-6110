type token =
  | FUN
  | LET
  | REC
  | IN
  | APP
  | VAR of (string)
  | IMP
  | LPAREN
  | RPAREN
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | EQ
  | LEQ
  | LT
  | GEQ
  | GT
  | IF
  | THEN
  | ELSE
  | NUM of (int)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 37 "parser.ml"
let yytransl_const = [|
  257 (* FUN *);
  258 (* LET *);
  259 (* REC *);
  260 (* IN *);
  261 (* APP *);
  263 (* IMP *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* TRUE *);
  267 (* FALSE *);
  268 (* AND *);
  269 (* OR *);
  270 (* NOT *);
  271 (* PLUS *);
  272 (* MINUS *);
  273 (* TIMES *);
  274 (* DIV *);
  275 (* MOD *);
  276 (* EQ *);
  277 (* LEQ *);
  278 (* LT *);
  279 (* GEQ *);
  280 (* GT *);
  281 (* IF *);
  282 (* THEN *);
  283 (* ELSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  262 (* VAR *);
  284 (* NUM *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\006\000\006\000\006\000\006\000\007\000\
\007\000\007\000\007\000\007\000\007\000\008\000\008\000\009\000\
\009\000\010\000\010\000\011\000\011\000\011\000\011\000\011\000\
\011\000\000\000"

let yylen = "\002\000\
\002\000\004\000\006\000\006\000\007\000\001\000\001\000\002\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\001\000\001\000\001\000\001\000\001\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\038\000\039\000\
\000\000\000\000\037\000\042\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\008\000\000\000\000\000\000\000\041\000\000\000\009\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\003\000\005\000"

let yydgoto = "\002\000\
\012\000\013\000\023\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000"

let yysindex = "\008\000\
\004\255\000\000\005\255\014\255\000\000\004\255\000\000\000\000\
\013\255\004\255\000\000\000\000\002\000\000\000\016\255\015\255\
\060\255\001\255\012\255\044\255\000\000\005\255\026\255\005\255\
\022\255\025\255\000\000\018\255\000\000\013\255\013\255\013\255\
\013\255\013\255\013\255\013\255\013\255\013\255\013\255\013\255\
\013\255\013\255\013\255\013\255\013\255\013\255\013\255\013\255\
\000\000\000\000\004\255\028\255\004\255\000\000\004\255\000\000\
\000\000\000\000\000\000\000\000\013\255\013\255\013\255\013\255\
\013\255\013\255\013\255\013\255\013\255\013\255\013\255\013\255\
\013\255\013\255\000\000\004\255\047\255\046\255\049\255\004\255\
\004\255\004\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\037\001\
\058\001\079\001\100\001\121\001\000\000\252\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\127\000\148\000\001\000\022\000\
\043\000\211\000\232\000\253\000\029\001\169\000\190\000\064\000\
\085\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\004\000\000\000\035\000\000\000\000\000\000\000\
\000\000\072\000\026\000"

let yytablesize = 660
let yytable = "\026\000\
\024\000\029\000\007\000\028\000\003\000\004\000\014\000\025\000\
\001\000\005\000\022\000\006\000\040\000\007\000\008\000\007\000\
\024\000\009\000\005\000\022\000\006\000\025\000\007\000\008\000\
\041\000\050\000\009\000\052\000\010\000\035\000\036\000\011\000\
\051\000\054\000\027\000\030\000\031\000\032\000\033\000\034\000\
\011\000\053\000\026\000\055\000\075\000\049\000\077\000\076\000\
\078\000\005\000\080\000\006\000\082\000\007\000\008\000\042\000\
\043\000\009\000\044\000\045\000\046\000\047\000\048\000\027\000\
\056\000\057\000\058\000\059\000\060\000\079\000\000\000\011\000\
\081\000\083\000\084\000\085\000\037\000\038\000\039\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
\000\000\029\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\024\000\014\000\000\000\000\000\000\000\000\000\014\000\
\000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\025\000\024\000\024\000\033\000\000\000\025\000\000\000\
\014\000\014\000\000\000\000\000\015\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\026\000\025\000\
\025\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\027\000\026\000\026\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\028\000\027\000\027\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\029\000\028\000\028\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\020\000\029\000\029\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\020\000\020\000\000\000\
\000\000\000\000\020\000\020\000\020\000\020\000\020\000\021\000\
\020\000\020\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\021\000\021\000\000\000\000\000\000\000\021\000\
\021\000\021\000\021\000\021\000\022\000\021\000\021\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\000\000\000\000\000\000\022\000\022\000\022\000\022\000\
\022\000\023\000\022\000\022\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\000\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\030\000\023\000\
\023\000\000\000\000\000\030\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\032\000\030\000\030\000\000\000\000\000\
\032\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
\031\000\032\000\032\000\000\000\000\000\031\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\000\000\031\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\015\000\033\000\000\000\000\000\000\000\015\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\000\000\033\000\033\000\
\015\000\015\000\015\000\015\000\015\000\016\000\015\000\015\000\
\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\017\000\016\000\016\000\000\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\018\000\
\017\000\017\000\000\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\018\000\018\000\018\000\019\000\018\000\018\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\000\000\019\000\019\000"

let yycheck = "\006\000\
\000\000\000\000\007\001\010\000\001\001\002\001\000\000\004\000\
\001\000\006\001\006\001\008\001\012\001\010\001\011\001\020\001\
\003\001\014\001\006\001\006\001\008\001\000\000\010\001\011\001\
\013\001\022\000\014\001\024\000\025\001\015\001\016\001\028\001\
\007\001\009\001\009\000\020\001\021\001\022\001\023\001\024\001\
\028\001\020\001\000\000\026\001\051\000\020\000\053\000\020\001\
\055\000\006\001\004\001\008\001\004\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\000\000\
\030\000\031\000\032\000\033\000\034\000\076\000\255\255\028\001\
\027\001\080\000\081\000\082\000\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\255\255\255\255\255\255\255\255\
\255\255\000\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\004\001\026\001\027\001\000\000\255\255\009\001\255\255\
\026\001\027\001\255\255\255\255\000\000\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\004\001\026\001\
\027\001\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\004\001\026\001\027\001\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\004\001\026\001\027\001\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\004\001\026\001\027\001\
\255\255\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\004\001\026\001\027\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\004\001\
\026\001\027\001\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\004\001\026\001\027\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\004\001\026\001\027\001\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\004\001\026\001\
\027\001\255\255\255\255\009\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\004\001\026\001\027\001\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\004\001\026\001\027\001\255\255\255\255\009\001\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\004\001\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\004\001\013\001\255\255\255\255\255\255\009\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\020\001\021\001\022\001\023\001\024\001\004\001\026\001\027\001\
\255\255\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\004\001\026\001\027\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\004\001\
\026\001\027\001\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\004\001\026\001\027\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\027\001"

let yynames_const = "\
  FUN\000\
  LET\000\
  REC\000\
  IN\000\
  APP\000\
  IMP\000\
  LPAREN\000\
  RPAREN\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  EQ\000\
  LEQ\000\
  LT\000\
  GEQ\000\
  GT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  NUM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 24 "parser.mly"
            ( _1 )
# 349 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 27 "parser.mly"
                         ( Fun(_2,_4) )
# 357 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 28 "parser.mly"
                             ( Cond(_2,_4,_6) )
# 366 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 29 "parser.mly"
                               ( Let(_2,_4,_6) )
# 375 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 30 "parser.mly"
                                   ( Letrec(_3,_5,_7) )
# 384 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_exp) in
    Obj.repr(
# 31 "parser.mly"
                ( _1 )
# 391 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 34 "parser.mly"
        ( [_1] )
# 398 "parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_list) in
    Obj.repr(
# 35 "parser.mly"
                 ( _1 :: _2 )
# 406 "parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infix_exp) in
    Obj.repr(
# 38 "parser.mly"
                           ( Eq(_1,_3) )
# 414 "parser.ml"
               : 'compare_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infix_exp) in
    Obj.repr(
# 39 "parser.mly"
                            ( Leq(_1,_3) )
# 422 "parser.ml"
               : 'compare_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infix_exp) in
    Obj.repr(
# 40 "parser.mly"
                           ( Lt(_1,_3) )
# 430 "parser.ml"
               : 'compare_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infix_exp) in
    Obj.repr(
# 41 "parser.mly"
                            ( Leq(_3,_1) )
# 438 "parser.ml"
               : 'compare_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infix_exp) in
    Obj.repr(
# 42 "parser.mly"
                           ( Lt(_3,_1) )
# 446 "parser.ml"
               : 'compare_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infix_exp) in
    Obj.repr(
# 43 "parser.mly"
              ( _1 )
# 453 "parser.ml"
               : 'compare_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plus_minus_exp) in
    Obj.repr(
# 46 "parser.mly"
                   ( _1 )
# 460 "parser.ml"
               : 'infix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'times_div_mod_exp) in
    Obj.repr(
# 47 "parser.mly"
                      ( _1 )
# 467 "parser.ml"
               : 'infix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 48 "parser.mly"
            ( _1 )
# 474 "parser.ml"
               : 'infix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_exp) in
    Obj.repr(
# 49 "parser.mly"
           ( _1 )
# 481 "parser.ml"
               : 'infix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 50 "parser.mly"
            ( _1 )
# 488 "parser.ml"
               : 'infix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'plus_minus_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 53 "parser.mly"
                                ( Plus(_1,_3) )
# 496 "parser.ml"
               : 'plus_minus_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'plus_minus_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 54 "parser.mly"
                                 ( Minus(_1,_3) )
# 504 "parser.ml"
               : 'plus_minus_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 55 "parser.mly"
                         ( Plus(_1,_3) )
# 512 "parser.ml"
               : 'plus_minus_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 56 "parser.mly"
                          ( Minus(_1,_3) )
# 520 "parser.ml"
               : 'plus_minus_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'times_div_mod_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 59 "parser.mly"
                                    ( Times(_1,_3) )
# 528 "parser.ml"
               : 'times_div_mod_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'times_div_mod_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 60 "parser.mly"
                                  ( Div(_1,_3) )
# 536 "parser.ml"
               : 'times_div_mod_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'times_div_mod_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 61 "parser.mly"
                                  ( Mod(_1,_3) )
# 544 "parser.ml"
               : 'times_div_mod_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 62 "parser.mly"
                          ( Times(_1,_3) )
# 552 "parser.ml"
               : 'times_div_mod_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 63 "parser.mly"
                        ( Div(_1,_3) )
# 560 "parser.ml"
               : 'times_div_mod_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 64 "parser.mly"
                        ( Mod(_1,_3) )
# 568 "parser.ml"
               : 'times_div_mod_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 67 "parser.mly"
                        ( And(_1,_3) )
# 576 "parser.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 68 "parser.mly"
                        ( And(_1,_3) )
# 584 "parser.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 71 "parser.mly"
                      ( Or(_1,_3) )
# 592 "parser.ml"
               : 'or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'app_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 72 "parser.mly"
                       ( Or(_1,_3) )
# 600 "parser.ml"
               : 'or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 75 "parser.mly"
                       ( App(_1,_2) )
# 608 "parser.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 76 "parser.mly"
               ( _1 )
# 615 "parser.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
        ( Var(_1) )
# 622 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "parser.mly"
        ( Num(_1) )
# 629 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
         ( Bool(true) )
# 635 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
          ( Bool(false) )
# 641 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 83 "parser.mly"
                   ( Not(_2) )
# 648 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 84 "parser.mly"
                      ( _2 )
# 655 "parser.ml"
               : 'atomic_exp))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
;;
